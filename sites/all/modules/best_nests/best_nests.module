<?php 



require_once('inc/listings.inc');
require_once('inc/theme.inc');
require_once('inc/menu.inc');
require_once('inc/images.inc');
require_once('inc/calendar.inc');
require_once('inc/payment.inc');
require_once('inc/search.inc');
require_once('inc/best_nests_ipn_listener.inc');
require_once('inc/abuse.inc');
require_once('inc/reimport.inc');

/**
 * Implementation of hook_help().
 */
function best_nests_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ii_tracker':
      return t("TODO: Create admin help text.");
    // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}

/**
 * Implementation of hook_perm().
 */
function best_nests_perm() {
  return array('best_nests_admin', 'best_nests_listing');
}




function best_nests_node_info() {

	return array(
	    'best_nests_listing'=> array(
	      'name' => 'Listing',
	      'module' => 'best_nests',
	      'description' => 'Property Listing',
	      'help' => '',
	      'has_title' => TRUE,
	      'title_label' => 'Property Title', 
	      'has_body' => TRUE,
	      'body_label' => 'Property Description',
	   	)
	);
}


function best_nests_insert($node){
	switch($node->type){
		case "best_nests_listing":
			db_query("
				INSERT INTO {best_nests_listings} 
					(listing_nid, base_price, beds, baths, city, state, cleaning_fee, 
                    minimum_stay, website, youtube_link, description, region)
				VALUES
					(%d, %d, %d, %d, '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s')", 
				$node->nid, $node->base_price, $node->beds, $node->baths, $node->city, 
                $node->state, $node->cleaning_fee, $node->minimum_stay, $node->website, 
                $node->youtube_link, $node->description, $node->region);
			
			break;
	} 
	
}

function best_nests_update($node){
	switch($node->type){
		case "best_nests_listing":
				error_log("update");
			db_query("
				UPDATE {best_nests_listings} 
				SET	
					base_price=%f, beds=%d, baths=%d, city='%s', state='%s', 
					cleaning_fee=%d, minimum_stay=%d, website='%s', zip='%s',
                    youtube_link='%s', region='%s'
				WHERE
					listing_nid=%d",
					 
				$node->base_price, $node->beds, $node->baths, $node->city, 
                $node->state, $node->cleaning_fee, $node->minimum_stay, 
                $node->website, $node->zip, $node->youtube_link, $node->region,
                $node->nid);
            
                $address = array($node->city, $node->state, $node->zip);
                list($lat, $lng) = best_nests_geoencode(join(' ', $address));
                best_nests_save_geocode($node->nid, $lat, $lng);
			
			break;
	} 
	
}






/**
 * Implementation of hook_load().
 */
function best_nests_load($node) {

	switch ($node->type){
		case "best_nests_listing":
			$additions = db_fetch_object(db_query("
				SELECT 
					base_price, beds, baths, city, state, cleaning_fee, zip,
                    minimum_stay, website, youtube_link, paid, region
				FROM
					best_nests_listings
				WHERE
					listing_nid = $node->nid
			"));
			
			$additions->bookings = array();
            $additions->discount = array();
            //$additions->provisionally_booked = array();
            //$addti
            
           
			//$additions->images = array();
			$images_result =  db_query("
				SELECT f.filename, f.fid, i.is_default 
				FROM files f, best_nests_images i
				WHERE 
					f.fid = i.fid AND 
					i.listing_nid = $node->nid
			");
			
			$additions->images = array();
			
			
			while ($row = db_fetch_object($images_result)){
				$additions->images[] = $row;
			}

			if (empty($additions->images)){
				$additions->default_image = best_nests_get_default_image($node->nid);
			}elseif (!isset($additions->default_image)){
				
				$additions->default_image = $additions->images[0]->filename;
			}
			
			
            //$additions->default_image = db_result(db_query("SELECT filename FROM best_nests_images WHERE listing_nid = $node->nid AND is_default=1"));
            //if ($additions->default_image === FALSE){
            //    $additions->default_image = $additions->images[0];
            //}
			break;
	}
	
	return $additions;
}


function best_nests_my_account(){
	global $user;
	header("Location: /user/" .  $user->uid . "/edit");
}

function best_nests_contact_form(){
	if ($_POST['submit']){
		$body = "Category: {$_POST['cid']}
			
Dear Admin,
			
{$_POST['message']}
			
Sincerely,
			
{$_POST['name']}
{$_POST['email']}";
		
		$headers = "From: {$_POST['email']}\r\n" .
	    "Reply-To: {$_POST['email']}\r\n";
	
		$to = 'thebestnests@gmail.com';
		
		if ($_POST['copy'] == '1'){
			$headers .= "CC: {$_POST['email']}\r\n";
		}
		mail($to, $_POST['subject'], $body, $headers);
		return "Your message has been sent. Thanks for contacting The Best Nests";
	}else{
		return theme('best-nests-contact-form');
	}

}




/**
 * Implementation of hook_init().
 */
function best_nests_init() {
	drupal_add_css(drupal_get_path('module', 'best_nests') . '/css/best_nests.css');
	drupal_add_css(drupal_get_path('module', 'best_nests') . '/css/style.css');
	drupal_add_css(drupal_get_path('module', 'best_nests') . '/css/jquery-ui.css');
    drupal_add_css(drupal_get_path('module', 'best_nests') . '/css/jquery.lightbox-0.5.css');
	
	drupal_add_js(drupal_get_path('module', 'best_nests') . '/js/best_nests.js');
  	drupal_add_js(drupal_get_path('module', 'best_nests') . '/js/jquery-1.5.1.min.js');
  	drupal_add_js(drupal_get_path('module', 'best_nests') . '/js/jquery-ui-1.8.13.custom.min.js');
    drupal_add_js(drupal_get_path('module', 'best_nests') . '/js/jquery.lightbox-0.5.min.js');
}



function best_nests_get_date_list($from, $to){
	$dates = array();
	$from = strtotime($from);
	$to = strtotime($to);
	while ($from <= $to){
 		$dates[] = "'" . date("Y-m-d", $from) . "'";
 		$from += 86400;
 	}
	$dates = join(" OR ", $dates);
	return $dates;
}